
objref ff
proc ch() { local i,j,fac, pos, chAll,chDe,chAp,chSo,chCol,chAis,chMy,chNo, chAllA,chDeA,chApA,chSoA,chColA,chAisA,chMyA,chNoA


	//all
	chAll=0
	chAllA=0
	ff=new File()
	ff.wopen("exportOverlAll.tmp")
	forall {
		for j=1,nseg {
			ff.printf("%e\n",overl_charge_(j/nseg))
			pos=0.5/nseg+(j-1)/nseg
			chAll = chAll + area(pos)*na_ch_charge_(pos)	//mA/cm^2 * um^2
			chAllA = chAllA + area(pos)
		}
	}
	ff.close()



	//soma
	chSo=0
	chSoA=0
	ff=new File()
	ff.wopen("exportOverlSoma.tmp")
	soma {
		for j=1,nseg {
			ff.printf("%e\n",overl_charge_(j/nseg))
			pos=0.5/nseg+(j-1)/nseg
			chSo = chSo + area(pos)*na_ch_charge_(pos)	//mA/cm^2 * um^2
			chSoA = chSoA + area(pos)
		}
	}
	ff.close()

	//collaterals
	chCol=0
	chColA=0
	ff=new File()
	ff.wopen("exportOverlAxon.tmp")
	for i=1,axonNum-1 {					//axon[0] is AIS
		axon[i] {
			for j=1,nseg {
				ff.printf("%e\n",overl_charge_(j/nseg))
				pos=0.5/nseg+(j-1)/nseg
				chCol = chCol + area(pos)*na_ch_charge_(pos)	//mA/cm^2 * um^2
				chColA = chColA + area(pos)
			}
		}
	}
	ff.close()

	//ais
	chAis=0
	chAisA=0
	ff=new File()
	ff.wopen("exportOverlAxon.tmp")
	axon[0] {
		for j=1,nseg {
			ff.printf("%e\n",overl_charge_(j/nseg))
			pos=0.5/nseg+(j-1)/nseg
			chAis = chAis + area(pos)*na_ch_charge_(pos)	//mA/cm^2 * um^2
			chAisA = chAisA + area(pos)
		}
	}
	ff.close()



	//myelin
	chMy=0
	chMyA=0
	ff=new File()
	ff.wopen("exportOverlMyelin.tmp")
	for i=0,myNum-1 {
		my[i] {	
		for j=1,nseg {
				ff.printf("%e\n",overl_charge_(j/nseg))
				pos=0.5/nseg+(j-1)/nseg
				chMy = chMy + area(pos)*na_ch_charge_(pos)	//mA/cm^2 * um^2
				chMyA = chMyA + area(pos)
			}
		}
	}
	ff.close()

	//node
	chNo=0
	chNoA=0
	ff=new File()
	ff.wopen("exportOverlNode.tmp")
	for i=0,nodeNum-1 {
		node[i]  {
			for j=1,nseg {
				ff.printf("%e\n",overl_charge_(j/nseg))
				pos=0.5/nseg+(j-1)/nseg
				chNo = chNo + area(pos)*na_ch_charge_(pos)	//mA/cm^2 * um^2
				chNoA = chNoA + area(pos)
			}
		}
	}
	ff.close()


	
	fac=-10^-3*10^4*10^-12*dt*10^-3*6.24*10^18*(1/3)
		// (current (mA) / area (cm^2) ) * area (um^2) * dt in ms   
		//	10^-3          10^4           10^-12        10^-3
		//                         => A*s
		//and:
		//     A*s * number of elementary charges per Coulomb * 3 Na per 1 ATP
		//                   6.24*10^18=1/e=1/1.6*10^19              1/3


}

parameters()
geom_nseg()
init_channels()
